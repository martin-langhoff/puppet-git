#!/bin/bash

if [[ -n "${PPG_DEBUG}" ]]; then
	set -x
fi

pushd /etc/puppet >/dev/null || exit 1

PPG_EXEC_PATH=$( dirname $(readlink -f "${BASH_SOURCE[0]}" ) )
GIT_EXEC_PATH=$(git --exec-path)
GIT_DIR=$(git rev-parse --git-dir)
export GIT_SSH="${PPG_EXEC_PATH}/ppg-ssh"

. ${PPG_EXEC_PATH}/ppg-functions

### FIXME PROXYSERVER 
if [ -z "$GIT_DIR" ]; then
	echo >&2 "Not in a git checkout"
	exit 1
fi

reportsdir='/etc/puppet/.ppg/reports'
hostname=$(xhostname)

# the reports go to a "reports" directory right next to
# the puppet remote url. we must mangle the url a bit to make
# it edible to rsync/scp
# - remove the ssh:// or git+ssh:// prefix
# - add a : after hostname, before the first slash
remoteurl=$(git config --get remote.origin.url | sed 's!^ssh://!!;s!^git+ssh://!!;s!/!:/!')
remoteurl=$(dirname ${remoteurl})/reports

# Use sftp, which is awkward but co-exists easily with git-shell
# as we want our VMs to have very limited access.
# We always attempt to create the directory for the host
# although it'll fail after the first time as it's been created.
# The leading '-' makes it a softfail. Other failures are fatal
# thanks to the '-b -' option.
(   echo "-mkdir ${hostname}"
    echo cd ${hostname}
    for F in $(find ${reportsdir}/${hostname} -type f) ; do
        # printf %q gets us the right quoting
        printf 'put %q\n ' "${F}"
    done ) | sftp -b - $remoteurl/
sftpexit=$?

# cleanup
if [ $sftpexit -eq 0 ]; then
	find ${reportsdir}/${hostname} -type f -print0 \
	  | xargs -0 -l100 --no-run-if-empty rm
fi

exit $sftpexit
