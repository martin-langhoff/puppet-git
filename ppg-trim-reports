#!/bin/bash


if [[ -n "${PPG_DEBUG}" ]]; then
	set -x
fi

pushd /var/lib/ppg/reports.git >/dev/null || exit 1

PPG_EXEC_PATH=$( dirname $(readlink -f "${BASH_SOURCE[0]}" ) )
GIT_EXEC_PATH=$(git --exec-path)
GIT_DIR=$(git rev-parse --git-dir)

### FIXME PROXYSERVER 
if [ -z "$GIT_DIR" ]; then
	echo >&2 "Not in a git checkout"
	exit 1
fi

# reports are tiny, we can spool a month of them safely
# if you want it shorter, configure it so :-)
expiry="1.month.ago"
config_expiry=$(git config --get ppg.reportexpiry)
if [ -n "$config_expiry" ]; then
	expiry="$config_expiry"
fi


for head in $(git branch|sed 's/^..//'); do
    graft_sha1=$(git log --until="$expiry" -n1 --pretty=format:%H ${head})
	if [[ -z "$graft_sha1" ]]; then
	    # nothing to prune
	    continue
	fi
	# is it already grafted?
	if grep -q "^${graft_sha1} " "${GIT_DIR}/info/grafts" &>/dev/null ; then
		# don't duplicate the graft
		continue
	fi
	some_grafted='true'
	if ! grep -q -P "^${graft_sha1} \w+" ${GIT_DIR}/info/grafts ; then
		if [[ -z "$empty_commit" ]]; then
			# prep empty commit
			# skip git read-tree --empty, we get the same with
			export GIT_INDEX_FILE=/tmp/ppg-emptytree.$$
			empty_tree="$(git write-tree)"
			rm ${GIT_INDEX_FILE}
			unset GIT_INDEX_FILE
			export GIT_AUTHOR_NAME='Nobody'
			export GIT_AUTHOR_EMAIL='<nobody@remote-learner.net>'
			export GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
			export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"
			empty_commit=$(echo empty | git commit-tree ${empty_tree})
			unset GIT_AUTHOR_NAME
			unset GIT_AUTHOR_EMAIL
			unset GIT_COMMITTER_NAME
			unset GIT_COMMITTER_EMAIL
			if [[ -z "$empty_commit" ]]; then
				echo "Failed to create empty commit" >&2
				exit 1
			fi
		fi
		echo "${graft_sha1} ${empty_commit}" >> ${GIT_DIR}/info/grafts
	fi
done

if [[ -z "$some_grafted" ]]; then
	# nothing to do
	exit 0
fi

# ppg-repack makes the unreachable objects "loose"
# git prune --expire actually deletes them
$PPG_EXEC_PATH/ppg-repack -Ad
##TODO prune grafts based on git fsck --unreachable
git prune --expire=23.hours.ago

### Cleanup stale grafts
# current grafts points are reachable,
# pruned graft points (made obsolete by a newer graft)
# cannot be retrieved and git cat-file exit code is 128
touch ${GIT_DIR}/info/grafts.tmp.$$
while read line; do
	graftpoint=$(echo "${line}" | cut -d' ' -f1)
	if git cat-file commit ${graftpoint} &>/dev/null ; then
		echo ${line} >> ${GIT_DIR}/info/grafts.tmp.$$
	fi
done < "${GIT_DIR}/info/grafts"

if [ -s ${GIT_DIR}/info/grafts.tmp.$$ ]; then
	mv ${GIT_DIR}/info/grafts.tmp.$$ ${GIT_DIR}/info/grafts
fi
