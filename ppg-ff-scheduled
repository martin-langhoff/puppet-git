#!/bin/bash

PPG_EXEC_PATH=$( dirname $(realpath "${BASH_SOURCE[0]}" ) )
GIT_EXEC_PATH=$(git --exec-path)
GIT_DIR=$(git rev-parse --git-dir)

if [ -z "$GIT_DIR" ]; then
	echo >&2 "Not in a git checkout"
	exit 1
fi

production_sha1=$(git rev-parse --revs-only refs/heads/production 2>/dev/null)
if [ -z "$production_sha1" ]; then
	exit 0
fi

nowepoch=$(date --utc +%s)
for tag in $(git tag -l | grep '^ppg-sched-' | sort -r); do
	# Sneaky sed: 's/-/ /3g' replaces the 3rd dash only
	datestamp=$(echo "$tag"|sed 's/^ppg-sched-//;s/-/ /3g;s/\./:/g;')
	tagepoch=$(date -d "$datestamp" +%s)
	if [[ $tagepoch -lt $nowepoch ]]; then
		targettag=$tag
	fi
done

if [ -z "$targettag" ]; then
	echo 'Nothing to do...'
	exit
fi

target_sha1=$(git rev-parse --revs-only ${targettag}^{commit} ) || exit 1

if [ "$production_sha1" = "$target_sha1" ]; then
	# nothing to do
	exit 0
fi


if $PPG_EXEC_PATH/ppg-is-ancestor $targettag $production_sha1 ; then
	# nothing to do!
	exit 0
fi

if ! $PPG_EXEC_PATH/ppg-is-ancestor $production_sha1 $target_sha1 ; then
	echo "ERROR: production branch and $targettag have diverged!"
	exit 1
fi

headname=$(git rev-parse --symbolic-full-name --revs-only HEAD)

if [ "$headname" = 'refs/heads/production' ]; then
	# sanity checks when on production
	if [ $(git diff --name-status HEAD | wc -l) -gt 0 ]; then
		echo >&2 'ERROR: Currently on "production" branch and with dirty state.'
		echo >&2 "       Refusing to update with scheduled changes."
		exit 1
	fi
fi

echo "About to update production with scheduled changes:"
git log --oneline refs/heads/production..$target_sha1

# and finally
if [ "$headname" = 'refs/heads/production' ]; then
	echo "Updating current production checkout"
	git merge --ff-only $target_sha1
	exit $?
else
	git push . $target_sha1:refs/heads/production
	exit $?
fi
